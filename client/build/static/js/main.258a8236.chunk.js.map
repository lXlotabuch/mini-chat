{"version":3,"sources":["store/action.js","components/Chat/Chat.jsx","store/middlware.js","components/Form/Form.jsx","store/reducer.js","store/index.js","App.js","reportWebVitals.js","index.js"],"names":["SET_MESSAGES","START_LOADING","END_LOADING","SET_ERROR","ADD_MESSAGE","setError","payload","type","Chat","connect","state","messages","isLoading","error","getMessages","dispatch","a","fetch","res","json","data","status","useEffect","className","size","length","map","name","message","_id","title","style","width","layout","labelCol","span","wrapperCol","tailLayout","offset","FormMessage","sendMessage","values","method","headers","body","JSON","stringify","success","Form","useForm","form","handleSubmit","setFieldsValue","text","initialValues","remember","onFinish","Item","label","rules","required","pattern","TextArea","autoSize","minRows","maxRows","htmlType","initialState","store","createStore","composeWithDevTools","applyMiddleware","thunk","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kTAAaA,EAAe,eACfC,EAAgB,gBAChBC,EAAc,cACdC,EAAY,YACZC,EAAc,cAoBdC,EAAW,SAAAC,GAAO,MAAK,CAClCC,KAAMJ,EACNG,Y,iBCdWE,EAAOC,aANI,SAAAC,GAAK,MAAK,CAChCC,SAAUD,EAAMC,SAChBC,UAAWF,EAAME,UACjBC,MAAOH,EAAMG,SAG8B,CAAEC,YCHpB,yDAAM,WAAMC,GAAN,iBAAAC,EAAA,6DAC/BD,EFMiC,CACjCR,KAAMN,IERyB,SAEbgB,MAAM,UAFO,cAEzBC,EAFyB,gBAGZA,EAAIC,OAHQ,OAGzBC,EAHyB,OAKZ,MAAfF,EAAIG,OACNN,EFTmC,CACrCR,KAAMP,EACNM,QEOuBc,IAChBL,EAASV,EAASe,IACzBL,EFG+B,CAC/BR,KAAML,IEZyB,2CAAN,wDDGPO,EAClB,YAA2C,IAAxCE,EAAuC,EAAvCA,SAAUG,EAA6B,EAA7BA,YAAaF,EAAgB,EAAhBA,UAKxB,OAJAU,qBAAU,WACRR,MACC,CAACA,IAEAF,EAEA,qBAAKW,UAAU,cAAf,SACE,cAAC,IAAD,CAAMC,KAAK,YAKZb,EAASc,OASZ,qBAAKF,UAAU,OAAf,SACGZ,EAASe,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAlB,OACZ,cAAC,IAAD,CAAgBC,MAAOH,EAAMI,MAAO,CAAEC,MAAO,OAA7C,SACE,4BAAIJ,KADKC,QATb,qBAAKN,UAAU,cAAf,SACE,gE,4CEvBJU,G,OAAS,CACbC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,MAEhBE,EAAa,CACjBD,WAAY,CAAEE,OAAQ,EAAGH,KAAM,IAGpBI,EAAc9B,YAAQ,KAAM,CAAE+B,YDMhB,SAAAC,GAAM,8CAAI,WAAM1B,GAAN,iBAAAC,EAAA,sEACjBC,MAAM,SAAU,CAChCyB,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUL,KANY,cAC7BvB,EAD6B,gBAQhBA,EAAIC,OARY,cAQ7BC,EAR6B,OAUhB,MAAfF,EAAIG,SACNO,IAAQmB,QAAQ,gBAChBhC,EFrBkC,CACpCR,KAAMH,EACNE,QEmBsBc,KAZa,kBAc5BA,GAd4B,2CAAJ,wDCNNX,EAA+B,YAAsB,IAAnB+B,EAAkB,EAAlBA,YAC3D,EAAeQ,IAAKC,UAAbC,EAAP,oBAEMC,EAAY,uCAAG,WAAMV,GAAN,eAAAzB,EAAA,sEACAwB,EAAYC,GADZ,QACbrB,EADa,QAEVP,MACPe,IAAQf,MAAMO,EAAKQ,SACdsB,EAAKE,eAAe,CAAEC,KAAM,OAJhB,2CAAH,sDAOlB,OACE,eAAC,IAAD,yBACEH,KAAMA,GACFjB,GAFN,IAGEV,UAAU,eACVI,KAAK,QACL2B,cAAe,CAAEC,UAAU,GAC3BC,SAAUL,EANZ,UAOE,cAAC,IAAKM,KAAN,CACEC,MAAM,OACN/B,KAAK,OACLgC,MAAO,CACL,CAAEC,UAAU,EAAMhC,QAAS,2BAC3B,CACEiC,QAAS,+CACTjC,QAAS,mBAPf,SAUE,cAAC,IAAD,MAGF,cAAC,IAAK6B,KAAN,CACEC,MAAM,UACN/B,KAAK,UACLgC,MAAO,CAAC,CAAEC,UAAU,EAAMhC,QAAS,+BAHrC,SAIE,cAAC,IAAMkC,SAAP,CAAgBC,SAAU,CAAEC,QAAS,EAAGC,QAAS,OAGnD,cAAC,IAAKR,KAAN,2BAAepB,GAAf,aACE,cAAC,IAAD,CAAQ9B,KAAK,UAAU2D,SAAS,SAAhC,8B,iBC7CFC,EAAe,CACnBxD,SAAU,GACVC,WAAW,EACXC,MAAO,M,kBCJMuD,EAFDC,uBDSS,WAA8C,IAA7C3D,EAA4C,uDAApCyD,EAAoC,yCAApB5D,EAAoB,EAApBA,KAAMD,EAAc,EAAdA,QACpD,OAAQC,GACN,KAAKP,EACH,OAAO,2BACFU,GADL,IAEEC,SAAUL,IAEd,KAAKF,EACH,OAAO,2BACFM,GADL,IAEEC,SAAS,CAAEL,GAAH,mBAAeI,EAAMC,aAEjC,KAAKV,EACH,OAAO,2BACFS,GADL,IAEEE,WAAW,IAEf,KAAKV,EACH,OAAO,2BACFQ,GADL,IAEEE,WAAW,IAEf,KAAKT,EACH,OAAO,2BACFO,GADL,IAEEG,MAAOP,IAGX,QACE,OAAOI,KCtCsB4D,8BAAoBC,0BAAgBC,OCcxDC,MAXf,WACE,OACE,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,sBAAK7C,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAACgB,EAAD,UCDOmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.258a8236.chunk.js","sourcesContent":["export const SET_MESSAGES = 'SET_MESSAGES';\r\nexport const START_LOADING = 'START_LOADING';\r\nexport const END_LOADING = 'END_LOADING';\r\nexport const SET_ERROR = 'SET_ERROR';\r\nexport const ADD_MESSAGE = 'ADD_MASSAGE';\r\n\r\nexport const setMessages = payload => ({\r\n  type: SET_MESSAGES,\r\n  payload,\r\n});\r\n\r\nexport const addMessage = payload => ({\r\n  type: ADD_MESSAGE,\r\n  payload,\r\n});\r\n\r\nexport const startLoading = () => ({\r\n  type: START_LOADING,\r\n});\r\n\r\nexport const endLoading = () => ({\r\n  type: END_LOADING,\r\n});\r\n\r\nexport const setError = payload => ({\r\n  type: SET_ERROR,\r\n  payload,\r\n});\r\n","import { Card, Spin } from 'antd';\r\nimport React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getMessages } from '../../store/middlware';\r\nimport './Chat.scss';\r\n\r\nconst mapStateToProps = state => ({\r\n  messages: state.messages,\r\n  isLoading: state.isLoading,\r\n  error: state.error,\r\n});\r\n\r\nexport const Chat = connect(mapStateToProps, { getMessages })(\r\n  ({ messages, getMessages, isLoading }) => {\r\n    useEffect(() => {\r\n      getMessages();\r\n    }, [getMessages]);\r\n\r\n    if (isLoading) {\r\n      return (\r\n        <div className='chat center'>\r\n          <Spin size='large' />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (!messages.length) {\r\n      return (\r\n        <div className='chat center'>\r\n          <p>Sorry, no message for you!</p>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className='chat'>\r\n        {messages.map(({ name, message, _id }) => (\r\n          <Card key={_id} title={name} style={{ width: '80%' }}>\r\n            <p>{message}</p>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n    );\r\n  },\r\n);\r\n","import { message } from 'antd';\r\nimport {\r\n  addMessage,\r\n  endLoading,\r\n  setError,\r\n  setMessages,\r\n  startLoading,\r\n} from './action';\r\n\r\nexport const getMessages = () => async dispatch => {\r\n  dispatch(startLoading());\r\n  const res = await fetch('/posts');\r\n  const data = await res.json();\r\n\r\n  if (res.status === 200) {\r\n    dispatch(setMessages(data));\r\n  } else dispatch(setError(data));\r\n  dispatch(endLoading());\r\n};\r\n\r\nexport const sendMessage = values => async dispatch => {\r\n  const res = await fetch('/posts', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(values),\r\n  });\r\n  const data = await res.json();\r\n\r\n  if (res.status === 200) {\r\n    message.success('Message send');\r\n    dispatch(addMessage(data));\r\n  }\r\n  return data;\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Form, Input, Button, message } from 'antd';\r\nimport { sendMessage } from '../../store/middlware';\r\nimport './Form.scss';\r\n\r\nconst layout = {\r\n  labelCol: { span: 4 },\r\n  wrapperCol: { span: 20 },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: { offset: 4, span: 4 },\r\n};\r\n\r\nexport const FormMessage = connect(null, { sendMessage })(({ sendMessage }) => {\r\n  const [form] = Form.useForm();\r\n\r\n  const handleSubmit = async values => {\r\n    const data = await sendMessage(values);\r\n    if (data.error) {\r\n      message.error(data.message);\r\n    } else form.setFieldsValue({ text: null });\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      form={form}\r\n      {...layout}\r\n      className='form-message'\r\n      name='basic'\r\n      initialValues={{ remember: true }}\r\n      onFinish={handleSubmit}>\r\n      <Form.Item\r\n        label='Name'\r\n        name='name'\r\n        rules={[\r\n          { required: true, message: 'Please input your name!' },\r\n          {\r\n            pattern: /^[a-zа-яіїё0-9_]+$/i,\r\n            message: 'Uncorrect name',\r\n          },\r\n        ]}>\r\n        <Input />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        label='Message'\r\n        name='message'\r\n        rules={[{ required: true, message: 'Please input your message!' }]}>\r\n        <Input.TextArea autoSize={{ minRows: 2, maxRows: 5 }} />\r\n      </Form.Item>\r\n\r\n      <Form.Item {...tailLayout}>\r\n        <Button type='primary' htmlType='submit'>\r\n          Submit\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n});\r\n","import {\r\n  ADD_MESSAGE,\r\n  END_LOADING,\r\n  SET_ERROR,\r\n  SET_MESSAGES,\r\n  START_LOADING,\r\n} from './action';\r\n\r\nconst initialState = {\r\n  messages: [],\r\n  isLoading: false,\r\n  error: null,\r\n};\r\n\r\nexport const reducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case SET_MESSAGES:\r\n      return {\r\n        ...state,\r\n        messages: payload,\r\n      };\r\n    case ADD_MESSAGE:\r\n      return {\r\n        ...state,\r\n        messages: [payload, ...state.messages],\r\n      };\r\n    case START_LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case END_LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n      };\r\n    case SET_ERROR:\r\n      return {\r\n        ...state,\r\n        error: payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport { reducer } from './reducer';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\r\n\r\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport default store;\r\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport 'antd/dist/antd.css';\nimport './App.scss';\nimport { Chat } from './components/Chat/Chat';\nimport { FormMessage } from './components/Form/Form';\nimport store from './store';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className='App'>\n        <Chat />\n        <FormMessage />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './styles/reset.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}